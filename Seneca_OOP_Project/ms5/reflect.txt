/***********************************************************************
// OOP244 Final Project Milestone 5
//
// File	reflect.txt
// -----------------------------------------------------------
// Name            Date            Reason
// Wing Ho Chau
// Seneca Email: whchau1@myseneca.ca
// Seneca ID: 150924231
// I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
/////////////////////////////////////////////////////////////////
***********************************************************************/
In this milestone, I find it very important to break down a large program into small functions. The modules help organize the code well which makes it easy to read and understand. Appropriate comments and documentation can easily let me find a suitable function to use. As long as I implement the class correctly. I can easily manipulate the object. Encapsulation is a good feature in C++ that groups all the functions in a class that an object can perform. I can create different constructors to control how the object is initialized based on my usage.
For the abstract base class IOAble, it has two pure virtual functions. I thought the virtual function only affected the next hierarchy, instead, it affected the entire hierarchy. It lets all the classes derived from IOAble class have the polymorphism feature of write() and read() functions. It is very handy when I am implementing my PreTriage class. Patient objects can call the respective read() or write() function by the class type of Patient. When the type is TestPatient, it asks the patient's name and OHIP, and issues a ticket; when the type is TriagePatient, it will ask for the Patient's details and also symptoms.
When the class has memory resources allocated, I need to be careful about the copy operation. Rule of 3 helps ensure the copy is a deep copy instead of the compiler behavior, the pointer points to the copy object. When the object is a pointer to an array, I need to dereference the pointer the perform tasks. If I don't dereference it, it will take the object address instead of the value. When coping a pointer object with another pointer object, I need to dereference both side to retrieve the value to perform deep copy.
Furthermore, 'register' is a keywork in C++. We cannot use it as the identifier.

For challenges, I found that the read the file or getting user input has to be careful about the buffer and the structure of the file. If I mistakenly read 1 more charater, the next read may fail. Also, get() and getline() has different performent when I give both a number of stream to read and the delimiter. get() will read until the delimiter and stop before the delimiter. It won't comsume the delimiter. However, getline() will read til the delimiter and consume the delimiter. Managing the input stream is important and need to be clear.
Moreover, a large program is hard to debug. When the program has some errors occurred, I will run the debugger and set a break point to trace the value and the flow. Since the program has many objects, the flow jumps between different files. It takes times to understand.